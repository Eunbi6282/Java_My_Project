package chapter06_07.Ex03;

import javax.security.auth.x500.X500Principal;

//기본 생성자 : Class A -> 기본생성자 생략 
class A{
	int m;					//필드 : 클래스 블락에 선언된 변수(힙영역에 저장)
										// static 을 붙이면 객체화 시키지 않고 사용가능
										// 힙영역의 메모리에는 반드시 초기값이 들어가야 함(할당 안하면 강제 초기화 시킴)
	
	A() {}		//기본 생성자 : 클래스 이름과 동일하면서 리턴타입이 없는 메소드 
	
	void work() {			//메소드: 리턴타입 메소드명(인풋 매개변수) { 실행구문 }
									// 반드시 호출을 통해서 작동된다. 
		System.out.println(m); 		//m : 메모리의 값을 가지고 온다. 
	}
}

class B{
	int m;
	
	B(){}	//기본생성자 : 생략가능 , 객체의 필드의 초기값이 정해져 있지 않으면 기본값으로 출력한다. 
	
	void work() {
		System.out.println(m);  	// 0 초기값으로 출력
	}
}

// 객체 생성시 생성자를 통해서 필드의 초기값을 할당하고 객체생성, 
class C {
	int m;
	
	//C () { }			//기본 생성자는 생략되어 있음, 
	
	C (int c){		//생성자의 인풋값을 받아서 메모리의 기본값으로 m변수 값을 오드 시킨다. 
		m = c;
	}
	
	void work () {
		System.out.println(m); 			//m은 객체 생성시 생성자에 정수 값을 넣어서 필드
	}
}

class D {
	int m,n,l,s;
	
	D() {}						//기본생성자
	
	D(int m, int n, int l, int s){		//매개변수 4개
		this.m = m;			//(매개변수의 값 = 인풋받는 변수 = 메모리에 올리는 변수)
		this.n = n;			// this : 자기 자신의 객체, 지역변수가 아닌 필드의 변수를 알려줌
		this.s = s;
		
	}
	
	D(int a, int b, int c){		//매개변수가 3개인 생성자
	m = a;
	n = b;
	l = c;
	}
	
	void work() {			//work()를 호출시 각각의 메모리의 값을 출력
		System.out.println("변수 m의 값 : " + m + ", n의 값: " + n + ", l의 값: " + l);
	}
}

public class DefaultConstructor {

	public static void main(String[] args) {
		// 클래스 내에 올 수 있는 것 : 필드, 메서드, 생성자, 내부 클래스
		// 생성자의 2가지 특징 : 1. 클래스 이름과 동일한 이름을 가진 메소드를 생성자라 한다. 
						//   2. 생성자는 반환타입이 없다. (메소드는 반환타입이 있다)
		//생성자를 이용하는 이유 : 객체를 생성할 대 필드의 값을 초기화 하면서 객체를 생성하고자 할때 사용.
			// 클래스 내에서 필드의 초기값은 일반적으로 할당하지 않는다.
			//클래스의 객체를 생성할 때 초기값을 할당하면서 객체를 생성할때
		
		//객체를 생성할 때 , 반드시 생성자 호출 
		
		// 기본생성자 ( Default Constructor) :
			// 인풋 매개 변수가 없는 생성자, 실행부의 값도 비어있는 상태의 생성자
			// 기본 생성자는 생략 가능하다.
			// 생략되어 있을 경우 , 컴파일러가 자동으로 생성해서 컴파일
			// 클래스 내의 기본 생성자이외의 다른 생성자가 존재하는 경우, 기본생성자 호출이 생략되면 안된다. 
		
		A a = new A();		//기본생성자 호출, classA는 기본 생성자 생략되어있음
							//객체 생성시 반드시 생성자를 호출해야 한다. 
		a.work(); 			
			
		B b = new B();	//기본생성자 호출
		
		C c = new C(4);		//<<<= 생성자 호출시 기본값을 인풋해서 메모리 필드에 초기값 구성
		
		c.work();			//객체 생성시 기본 기능 : 객체 생성과 + 필드의 값을 초기화
		System.out.println(c.m);
		
		C ccC = new C(10);
		ccC.work();
		
		/// class C는 기본생성자가 생략되어있음	C() {}
		//class C는 인풋 매개변수가 하나인 생성자가 존재
		
		//C ccccC = new C() ; //오류발생 : 다른 생성자가 있는데 기본생성자를 호출할 경우 오류 생김
		
		System.out.println("======class D========");
		D d = new D();		//class D의 기본생산자 호출
		D d2 = new D(444, 55, 9);
		d.work();
		d2.work();
		
		D d3 = new D(6, 4, 4, 3);
		
		
		//생성자 : 메소드 이름이 객체 이름과 동일하고 리턴값이 없는 메소드 
		//객체 내의 필드의 값을 초기화 할 때 오버로딩 (Overloading) 해서 해당 생성자가 호출
			//오버로딩 : 메소드명은 같고 (생성자명, 데이터 타입, 매개변수 갯수)에 따라서 해당 메소드를 로드한다.   <==시그니쳐
					// 오버로딩 오류 : 데이터 타입과 맥개변수의 갯수가 동일한 경우 
	}

}
